#!/usr/bin/env python
#
# copyright (c) 2018 greg brandt (brandt.greg@gmail.com)
#
# licensed under the apache license, version 2.0 (the "license");
# you may not use this file except in compliance with the license.
# you may obtain a copy of the license at
#
#     http://www.apache.org/licenses/license-2.0
#
# unless required by applicable law or agreed to in writing, software
# distributed under the license is distributed on an "as is" basis,
# without warranties or conditions of any kind, either express or implied.
# see the license for the specific language governing permissions and
# limitations under the license.
#
import argparse
import os
import subprocess
import zipfile
import SimpleHTTPServer
import SocketServer
import re
from bs4 import BeautifulSoup


BOLD = '\033[1m'
UNDERLINE = '\033[4m'
END = '\033[0m'


# Ignore these non-class files
BLACKLIST = [
        'allclasses-frame.html',
        'allclasses-noframe.html',
        'constant-values.html',
        'deprecated-list.html',
        'help-doc.html',
        'index-all.html',
        'index.html',
        'overview-frame.html',
        'overview-summary.html',
        'overview-tree.html',
        'package-frame.html',
        'package-list',
        'package-summary.html',
        'package-tree.html',
        'script.js',
        'serialized-form.html',
        'stylesheet.css',
        ]


def _parse_coordinates(index_dir, path):
    """
    Returns the Maven coordinates from the path.

    :param index_dir: The directory that index(...) wrote to
    :param path: Path to directory that contains index.html (i.e. root of module)
    """
    tokens = path.replace(index_dir + '/docs/repository/', '').split('/')
    return {
        'group': '.'.join(tokens[0:-2]),
        'artifact': tokens[-2],
        'version': tokens[-1],
        'path': path,
    }


def _parse_cli_doc(path):
    """
    Returns an object that represents the attributes on the Javadoc page.

    :param path: The path to Javadoc rendered as HTML.
    """
    cli_doc = {}

    with open(path, 'r') as f:
        soup = BeautifulSoup(f.read(), 'html.parser')

        # Header
        header = soup.find('div', {'class': 'header'})
        cli_doc['package'] = header.find('div', {'class': 'subTitle'}).text
        cli_doc['class'] = header.find('h2', {'class': 'title'}).text

        # Inheritance
        cli_doc['inheritance'] = [ih.find('li').text for ih in soup.find_all('ul', {'class': 'inheritance'})]

        # Description
        cli_doc['description'] = soup.find('div', {'class': 'description'}).find('div', {'class': 'block'}).text

        # TODO Constructor Summary

        # Method Summary
        cli_doc['method_summary'] = []
        method_summary_table = [elt for elt in soup.find_all('h3') if elt.text == 'Method Summary'][0].next_sibling.next_sibling
        for row in method_summary_table.find_all('tr'):
            method_summary = {}

            col_first = row.find('td', {'class': 'colFirst'})
            if col_first:
                method_summary['return_type'] = col_first.text

            col_last = row.find('td', {'class': 'colLast'})
            if col_last:
                method = col_last.find('code')
                if method:
                    method_summary['method'] = method.text
                description = col_last.find('div')
                if description:
                    method_summary['description'] = description.text

            if method_summary:
                cli_doc['method_summary'].append(method_summary)

        # TODO Details

    return cli_doc


def _render_cli_doc(cli_doc):
    """
    Renders a CLI-friendly version of Javadoc.

    :param cli_doc: The output of _render_cli_doc(...)

    TODO templatize this? Janky now
    """
    print BOLD + 'PACKAGE' + END
    print '\t' + cli_doc['package']
    print

    print BOLD + 'CLASS' + END
    print '\t' + cli_doc['class']
    print

    print BOLD + 'INHERITANCE' + END
    for i in xrange(len(cli_doc['inheritance'])):
        print '\t' + i * '    ' + cli_doc['inheritance'][i]
    print

    print BOLD + 'DESCRIPTION' + END
    print '\t' + cli_doc['description']
    print

    print BOLD + 'METHOD SUMMARY' + END
    for ms in cli_doc['method_summary']:
        print '\t' + ms['return_type'] + ' ' + ms['method']
        if 'description' in ms:
            print '\t| ' + ms['description']
        print
    print


def _render_class_name(coordinate, path):
    """
    Renders tab-separated coordintates / fully-qualified class name.

    :param coordinate: Maven coordinates for module
    :param path: Path to class's HTML Javadoc file
    """
    return path.replace(coordinate['path'], '').replace('.html', '').replace('/', '.')[1:]


def _render_coordinate(coordinate):
    """
    Renders Maven coordinate string.
    """
    return '{group}:{artifact}:{version}'.format(**coordinate)


def _render_list_element(coordinate, path):
    """
    Renders tab-separated Maven coordinates and class name.
    """
    return _render_coordinate(coordinate) + '\t' + _render_class_name(coordinate, path)


def index(maven_repo, index_dir):
    """
    Creates javadoc for all sources in local maven repository

    :param maven_repo: Local maven repository containing sources.
    :param index_dir: Output Javadoc to this directory.
    """
    index_source_dir = os.path.join(index_dir, 'sources')
    index_doc_dir = os.path.join(index_dir, 'docs')

    # Maven repository
    for root, dirnames, filenames in os.walk(maven_repo):
        for filename in filenames:
            if filename.endswith('-sources.jar'):
                source_jar = os.path.join(root, filename)
                print 'Indexing', source_jar
                try:
                    # Extract source files
                    source_dir = os.path.dirname(source_jar.replace(maven_repo, index_source_dir))
                    if not os.path.exists(source_dir):
                        with zipfile.ZipFile(source_jar, 'r') as zf:
                            zf.extractall(source_dir)

                    # Generate Javadoc
                    doc_dir = os.path.dirname(source_jar.replace(maven_repo, index_doc_dir))
                    if not os.path.exists(doc_dir):
                        subprocess.call(['javadoc', '-sourcepath', source_dir, '-d', doc_dir, '-subpackages', '.'])
                except Exception as e:
                    print 'Error!', e

    # Standard library
    if 'JAVA_HOME' in os.environ:
        source_jar = os.path.join(os.environ['JAVA_HOME'], 'src.zip')
        jdk_coordinates = ('java', 'stdlib', os.environ['JAVA_HOME'].split(os.path.sep)[-3])

        # Extract source files
        source_dir = os.path.join(
                os.path.dirname(source_jar.replace(os.environ['JAVA_HOME'], index_source_dir)),
                'repository',
                os.path.sep.join(jdk_coordinates))
        if not os.path.exists(source_dir):
            with zipfile.ZipFile(source_jar, 'r') as zf:
                zf.extractall(source_dir)

        # Generate Javadoc
        doc_dir = os.path.join(
                os.path.dirname(source_jar.replace(os.environ['JAVA_HOME'], index_doc_dir)),
                'repository',
                os.path.sep.join(jdk_coordinates))
        if not os.path.exists(doc_dir):
            subprocess.call(['javadoc', '-sourcepath', source_dir, '-d', doc_dir, '-subpackages', '.'])



def server(index_dir, server_port):
    """
    Starts a simple fileserver for docs / sources.

    :param index_dir: The directory that index(...) wrote to
    :param server_port: Bind fileserver to this port
    """
    os.chdir(os.path.join(index_dir))
    httpd = SocketServer.TCPServer(('', server_port), SimpleHTTPServer.SimpleHTTPRequestHandler)
    print 'Serving at port', server_port
    httpd.serve_forever()


def query(index_dir, class_pattern, group=None, artifact=None, version=None):
    """
    Generate CLI readable docs for a class

    :param index_dir: The directory that index(...) wrote to
    :param pattern: Package prefix or fully-qualified class name
    :param group: Maven coordinates group (e.g. org.apache.httpcomponents)
    :param artifact: Maven coordinates artifact (e.g. httpclient)
    :param version: Maven coordinates version (e.g. 4.5.3)
    """
    if class_pattern:
        class_pattern_regex = re.compile(class_pattern)

    # Find all artifact coordinates (i.e. things with index.html files)
    coordinates = []
    for root, dirnames, filenames in os.walk(os.path.join(index_dir, 'docs')):
        for filename in filenames:
            if filename == 'index.html':
                coordinates.append(_parse_coordinates(index_dir, root))

    # Filter coordinates
    filtered_coordinates = [c for c in coordinates if \
            (not group or c['group'] == group) and \
            (not artifact or c['artifact'] == artifact) and \
            (not version or c['version'] == version)]

    # Search for class pattern within those coordinates
    doc_files = []
    for coordinate in filtered_coordinates:
        for root, dirnames, filenames in os.walk(coordinate['path']):
            for filename in filenames:
                path = os.path.join(root, filename)
                class_name = _render_class_name(coordinate, path)
                if (not class_pattern or class_pattern_regex.match(class_name)) and filename not in BLACKLIST:
                    doc_files.append((coordinate, path))

    if len(doc_files) == 1:
        # Render CLI version of the doc
        _render_cli_doc(_parse_cli_doc(doc_files[0][1]))
    else:
        # List the matches as fully-qualified class names
        for class_name in sorted([_render_list_element(*doc_file) for doc_file in doc_files]):
            print class_name


EXAMPLES = """\
# Index all documents in local maven repo
./bin/jdoc --index

# Run simple HTTP file server
./bin/jdoc --server

# List classes matching a prefix pattern
./bin/jdoc org.apache

# Or according to certain Maven Coordinates
./bin/jdoc --group org.apache.httpcomponents \
    --artifact httpclient \
    --version 4.5.3

# Show plaintext Javadoc for a class
./bin/jdoc org.apache.http.client.HttpClient
"""


if __name__ == '__main__':
    parser = argparse.ArgumentParser(
            description='pydoc-like tool for interacting with Javadoc',
            formatter_class=argparse.RawTextHelpFormatter,
            epilog=EXAMPLES)

    # Indexing args
    parser.add_argument('--index', action='store_true')
    parser.add_argument('-m', '--maven_repo', 
            help='Local maven repository', default=os.path.join(os.environ['HOME'], '.m2'))
    parser.add_argument('-d', '--index_dir', 
            help='Javadoc index directory', default=os.path.join(os.environ['HOME'], '.jdoc'))

    # Serving args
    parser.add_argument('--server', action='store_true')
    parser.add_argument('-p', '--server_port', type=int, default=9999, help='Server port')

    # Query args
    parser.add_argument('-g', '--group', help='Maven group')
    parser.add_argument('-a', '--artifact', help='Maven artifact')
    parser.add_argument('-v', '--version', help='Maven version')
    parser.add_argument('patterns', nargs='*', help='Class name pattern(s)')

    args = parser.parse_args()

    # (Optionally) index before the query
    if args.index:
        index(args.maven_repo, args.index_dir)

    if args.server:
        # Serve HTML
        server(args.index_dir, args.server_port)
    else:
        # Output to CLI
        patterns = args.patterns if args.patterns else [None]
        for pattern in patterns:
            query(args.index_dir, pattern, 
                    group=args.group, artifact=args.artifact, version=args.version)
